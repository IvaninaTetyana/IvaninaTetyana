72 - 98,97,82
const isPalindrome = str => str === str.split("").reverse().join("");
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

false * 96,5,43,80,93,91,4,6,83,3,54,14,59,47,63,2,94,31,12,17,54,35,71,5,62,57,45,60,32,77,80,75,28,71,94,63,13,68,17,34,68,91,98,46,73,59,85,41,51,49,31,44,51,67,52,88,10,60,13,72,67,58,22,32,45,23,72,73,63,75,83,99,70,40,77,83,72,46,77,83,96,86,6,62,34,39,91,14,80,76,77,59,64,45,56
const removeDuplicates = array => Array.from(new Set(array));
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
true - orange

const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);

const squareRoot = num => Math.sqrt(num);
const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");
const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);
13 * 17
const getRandomSubset = (array, size) => array.slice(0, size);
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
55 - 83

const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
true + 47,6,67,23,60,43,55,77,88,63,51,27,8,47,12,91,90,10,3,6,52,4,79,5,97,30,85,14,78,92,23,55,40,49,24,36,41,51,63,62,33,94,71,33,60,36,19,34,81,93,20,87,56,98,3,67,8,5,13,4,65,13,1,40,16,68,61,1,9,5,82,58,47,53,49,43,21,1,45,91,62,73,6,50,95,80,47,70,45
const greet = name => `Hello, ${name}!`;
orange / 70
const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
